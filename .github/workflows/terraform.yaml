name: "Terraform" #name of workflow

on:
  workflow_dispatch: #triggered manually
    inputs:
      terraform_operation: #input parameter
        description: "Terraform operation: plan, apply, destroy"
        required: true
        default: "plan"
        type: choice #type of input parameter
        options:
          - plan
          - apply
          - destroy
#GITHUB runner performs these jobs, runner is a VM given by github
jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest #github runner will run on ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    defaults: #default settings applied to the whole job
      run:
        working-directory: ./ #this working directory can be override using working directory variable in any of your steps.
    steps:
      - name: Checkout #checkout if the workflow has access to the source code
        uses: actions/checkout@v2


      - name: Set up AWS credentials #configuring AWS CLI on the runner
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY

      - name: Setup Terraform #this sets up the TF_IN_AUTOMATION environment variable which means that terraform is running in an automated environment rather than an interactive one
        uses: hashicorp/setup-terraform@v1 #setting up terraform in the runner, this ensures that we can use terraform commands in our workflow
        with: #the above line, hashicorp/set... is from github marketplace
          terraform_version: 1.5.5
          terraform_wrapper: false

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check #The -check flag is used to check if the configuration files are formatted correctly without making any changes. If there are formatting issues, this command will return a non-zero exit status and indicate that there are issues to be fixed.

      - name: Terraform Init
        id: init
        run: terraform init #creates lock.hcl file so that version can be controlled.

      - name: Terraform plan
        run: terraform plan
        if: "${{ github.event.inputs.terraform_operation == 'plan' }}"

      - name: Terraform apply
        run: terraform apply --auto-approve
        if: ${{ github.event.inputs.terraform_operation == 'apply' }}
  Destroy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Terraform destroy
        run: terraform destroy --auto-approve
        if: "${{ github.event.inputs.terraform_operation == 'destroy' }}"


# on:
#   workflow_dispatch:
#     inputs:
#       terraform_operation:
#         description: "Terraform operation: plan, apply, destroy"
#         required: true
#         default: "plan"
#         type: choice
#         options:
#           - plan
#           - apply
#           - destroy

# jobs:
#   terraform:
#     name: "terraform"
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3


#       - name: Set up AWS credentials
#         run: |
#           aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
#           aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v1

#       - name: Go to the example directory
#         run: cd ./

#       - name: Terraform init
#         run: terraform init

#       - name: Terraform plan
#         run: terraform plan
#         if: "${{ github.event.inputs.terraform_operation == 'plan' }}"

#       - name: Terraform apply
#         run: terraform apply --auto-approve
#         if: "${{ github.event.inputs.terraform_operation == 'apply' }}"

#       - name: Terraform destroy
#         run: terraform destroy --auto-approve
#         if: "${{ github.event.inputs.terraform_operation == 'destroy' }}"